# -*- coding: utf-8 -*-
"""Proyecto1AnaliticaV1Dash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TSxYNbV4bPicIXZOcQtUXceChHP_LDfI
"""

import plotly.express as px
import pandas as pd
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

fig = target_distribution = df['target'].value_counts().reset_index()
target_distribution.columns = ['target', 'count']

# Crear un gráfico de torta
fig = px.pie(target_distribution, names='target', values='count',
             title='Distribución de la Variable "target"')
fig.show()

import plotly.express as px
import pandas as pd

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene la columna 'target'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Crea un histograma de la variable "target"
fig = px.histogram(df, x="target", title="Histograma de la Variable 'target'")
fig.show()

import plotly.express as px
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene las columnas 'target' y 'course'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Inicializa la aplicación Dash
app = dash.Dash(__name__)

# Define la disposición de la aplicación
app.layout = html.Div([
    dcc.Checklist(
        id='target-checklist',
        options=[{'label': target, 'value': target} for target in df['target'].unique()],
        value=df['target'].unique(),  # Valor inicial (todos los valores seleccionados)
        labelStyle={'display': 'block'}  # Mostrar etiquetas en bloques para una mejor visualización
    ),
    dcc.Graph(id='target-graph')
])

# Define la función de actualización del gráfico
@app.callback(
    Output('target-graph', 'figure'),
    Input('target-checklist', 'value')
)
def update_graph(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="course", color="target", title="Distribución de 'target' por Carrera")
    return fig

# Ejecuta la aplicación Dash
if __name__ == '__main__':
    app.run_server(debug=True)

import plotly.express as px
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene la columna 'target'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Inicializa la aplicación Dash
app = dash.Dash(__name__)

# Define la disposición de la aplicación
app.layout = html.Div([
    dcc.Checklist(
        id='target-checklist',
        options=[{'label': target, 'value': target} for target in df['target'].unique()],
        value=df['target'].unique(),  # Valor inicial (todos los valores seleccionados)
        labelStyle={'display': 'block'}  # Mostrar etiquetas en bloques para una mejor visualización
    ),
    dcc.Graph(id='target-graph')
])

# Define la función de actualización del gráfico
@app.callback(
    Output('target-graph', 'figure'),
    Input('target-checklist', 'value')
)
def update_graph(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="course", color="target", title="Distribución de 'target' por Carrera")
    return fig

# Ejecuta la aplicación Dash
if __name__ == '__main__':
    app.run_server(debug=True)

import plotly.express as px
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene la columna 'target'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Inicializa la aplicación Dash
app = dash.Dash(__name__)

# Define la disposición de la aplicación
app.layout = html.Div([
    dcc.Checklist(
        id='target-checklist',
        options=[{'label': target, 'value': target} for target in df['target'].unique()],
        value=df['target'].unique(),  # Valor inicial (todos los valores seleccionados)
        labelStyle={'display': 'block'}  # Mostrar etiquetas en bloques para una mejor visualización
    ),
    dcc.Graph(id='target-graph')
])

# Define la función de actualización del gráfico
@app.callback(
    Output('target-graph', 'figure'),
    Input('target-checklist', 'value')
)
def update_graph(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="course", color="target", title="Distribución de 'target' por Carrera")
    return fig

# Ejecuta la aplicación Dash
if __name__ == '__main__':
    app.run_server(debug=True)

import plotly.express as px
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene las columnas 'target' y 'grade'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Inicializa la aplicación Dash
app = dash.Dash(__name__)

# Define la disposición de la aplicación
app.layout = html.Div([
    dcc.Checklist(
        id='target-checklist',
        options=[{'label': target, 'value': target} for target in df['target'].unique()],
        value=df['target'].unique(),  # Valor inicial (todos los valores seleccionados)
        labelStyle={'display': 'block'}  # Mostrar etiquetas en bloques para una mejor visualización
    ),
    dcc.Graph(id='target-grade-boxplot')
])

# Define la función de actualización del gráfico de caja
@app.callback(
    Output('target-grade-boxplot', 'figure'),
    Input('target-checklist', 'value')
)
def update_boxplot(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.box(filtered_df, x="target", y="grade", title="Distribución de 'target' en función de la Puntuación de 'grade'")
    return fig

# Ejecuta la aplicación Dash
if __name__ == '__main__':
    app.run_server(debug=True)

import plotly.express as px
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene las columnas 'target' y 'age'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Inicializa la aplicación Dash
app = dash.Dash(__name__)

# Define la disposición de la aplicación
app.layout = html.Div([
    dcc.Checklist(
        id='target-checklist',
        options=[{'label': target, 'value': target} for target in df['target'].unique()],
        value=df['target'].unique(),  # Valor inicial (todos los valores seleccionados)
        labelStyle={'display': 'block'}  # Mostrar etiquetas en bloques para una mejor visualización
    ),
    dcc.Graph(id='target-age-bar')
])

# Define la función de actualización del gráfico de barras de conteo
@app.callback(
    Output('target-age-bar', 'figure'),
    Input('target-checklist', 'value')
)
def update_bar(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="target", color="age", title="Distribución de 'target' con Colores Codificados por edad")
    return fig

# Ejecuta la aplicación Dash
if __name__ == '__main__':
    app.run_server(debug=True)

import plotly.express as px
import pandas as pd

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene las columnas 'target', 'course' y 'tuition'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Crea un gráfico de barras apiladas que muestra la distribución de "target" por curso y matrícula
fig = px.bar(df, x="course", color="target", facet_col="tuition",
             title="Distribución de 'target' por Curso y Matrícula")
fig.show()

import plotly.express as px
import pandas as pd

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene las columnas 'target' y 'mquali'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Crea un gráfico de barras apiladas que muestra la distribución de "target" por nivel educativo
fig = px.bar(df, x="mquali", color="target", title="Distribución de 'target' por Nivel Educativo",
             category_orders={"mquali": ["basic", "secundary"]})

fig.show()

import plotly.express as px
import pandas as pd

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene las columnas 'target', 'course' y 'age'

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Crea un gráfico de barras apiladas que muestra la distribución de "target" por curso y edad
fig = px.bar(df, x="course", color="target", facet_col="age",
             title="Distribución de 'target' por Curso y Edad")
fig.show()

import plotly.express as px
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Supongamos que tienes un DataFrame llamado 'df' con tus datos
# Asegúrate de que 'df' contiene las columnas necesarias para todas las gráficas

# Reemplaza 'df' con tu propio DataFrame
df = pd.read_excel("D:/7. Septimo semestre/Analítica Computacional/Proyecto/data_variables.xlsx")

# Inicializa la aplicación Dash
app = dash.Dash(__name__)

# Define la disposición de la aplicación
app.layout = html.Div([
    html.H1("Análisis de Datos con Dash"),

    # Gráfico 1: Gráfico de barras apiladas con checklist por target y curso
    html.Div([
        dcc.Checklist(
            id='target-checklist-1',
            options=[{'label': target, 'value': target} for target in df['target'].unique()],
            value=df['target'].unique(),
            labelStyle={'display': 'block'}
        ),
        dcc.Graph(id='target-course-graph')
    ]),

    # Gráfico 2: Gráfico de caja con checklist por target
    html.Div([
        dcc.Checklist(
            id='target-checklist-2',
            options=[{'label': target, 'value': target} for target in df['target'].unique()],
            value=df['target'].unique(),
            labelStyle={'display': 'block'}
        ),
        dcc.Graph(id='target-grade-boxplot')
    ]),

    # Gráfico 3: Gráfico de barras de conteo con checklist por target
    html.Div([
        dcc.Checklist(
            id='target-checklist-3',
            options=[{'label': target, 'value': target} for target in df['target'].unique()],
            value=df['target'].unique(),
            labelStyle={'display': 'block'}
        ),
        dcc.Graph(id='target-age-bar')
    ]),

    # Gráfico 4: Gráfico de barras apiladas con checklist por target, curso y matrícula
    html.Div([
        dcc.Checklist(
            id='target-checklist-4',
            options=[{'label': target, 'value': target} for target in df['target'].unique()],
            value=df['target'].unique(),
            labelStyle={'display': 'block'}
        ),
        dcc.Graph(id='target-course-tuition-bar')
    ]),

    # Gráfico 5: Gráfico de barras apiladas con checklist por target y nivel educativo
    html.Div([
        dcc.Checklist(
            id='target-checklist-5',
            options=[{'label': target, 'value': target} for target in df['target'].unique()],
            value=df['target'].unique(),
            labelStyle={'display': 'block'}
        ),
        dcc.Graph(id='target-mquali-bar')
    ]),

    # Gráfico 6: Gráfico de barras apiladas con checklist por target, curso y edad
    html.Div([
        dcc.Checklist(
            id='target-checklist-6',
            options=[{'label': target, 'value': target} for target in df['target'].unique()],
            value=df['target'].unique(),
            labelStyle={'display': 'block'}
        ),
        dcc.Graph(id='target-course-age-bar')
    ])
])

# Define la función de actualización del Gráfico 1
@app.callback(
    Output('target-course-graph', 'figure'),
    Input('target-checklist-1', 'value')
)
def update_course_graph(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="course", color="target", title="Distribución de 'target' por Curso")
    return fig

# Define la función de actualización del Gráfico 2
@app.callback(
    Output('target-grade-boxplot', 'figure'),
    Input('target-checklist-2', 'value')
)
def update_grade_boxplot(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.box(filtered_df, x="target", y="grade", title="Distribución de 'target' en función de la Puntuación de 'grade'")
    return fig

# Define la función de actualización del Gráfico 3
@app.callback(
    Output('target-age-bar', 'figure'),
    Input('target-checklist-3', 'value')
)
def update_age_bar(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="target", color="age", title="Distribución de 'target' con Colores Codificados por Edad")
    return fig

# Define la función de actualización del Gráfico 4
@app.callback(
    Output('target-course-tuition-bar', 'figure'),
    Input('target-checklist-4', 'value')
)
def update_course_tuition_bar(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="course", color="target", facet_col="tuition",
                 title="Distribución de 'target' por Curso y Matrícula")
    return fig

# Define la función de actualización del Gráfico 5
@app.callback(
    Output('target-mquali-bar', 'figure'),
    Input('target-checklist-5', 'value')
)
def update_mquali_bar(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="mquali", color="target", title="Distribución de 'target' por Nivel Educativo",
                 category_orders={"mquali": ["basic", "secundary"]})
    return fig

# Define la función de actualización del Gráfico 6
@app.callback(
    Output('target-course-age-bar', 'figure'),
    Input('target-checklist-6', 'value')
)
def update_course_age_bar(selected_targets):
    filtered_df = df[df['target'].isin(selected_targets)]
    fig = px.bar(filtered_df, x="course", color="target", facet_col="age",
                 title="Distribución de 'target' por Curso y Edad")
    return fig

# Ejecuta la aplicación Dash
if __name__ == '__main__':
    app.run_server(debug=True)